import React, { useState, useEffect, useContext } from 'react';
import 'katex/dist/katex.min.css'; // Required to style the LaTeX
import Latex from 'react-latex-next';


import AIChat from '../AIChat/AIChat';
import MathQuill from '../MathQuill/MathQuill';
import QuicklyUploadQuestions from '../QuicklyUploadQuestions/QuicklyUploadQuestions';

//AppStateContext -> page+topic context
import {CurrentUserContext} from '../../contextVariables/CurrentUserContext';
import {CurrentPageContext} from '../../contextVariables/CurrentPageContext';
import {CurrentTopicContext}  from '../../contextVariables/CurrentTopicContext';
 
  
  
  
  
const MainWorkBoardPage = ({topicInformation}) => {
  //topicInformation contains all info about the current topic - videos, exercises, explanation.
  //exerciseInformation is an object containing all info about topic exercises. It is used here and in AI chat to send info
  
  const {currentTopic} = useContext(CurrentTopicContext);
  
  const mainStyle = {
    padding: '15px',
    backgroundColor: '#f2f2f2',

  };
  
 
  
  
 // exercises is an array of JSON objects.
 // topicInformation might contain other info, but exercises is what student solves (main stuff)
 //each object contains all properties of an exercise, like answer, question...
  const exercises = topicInformation.filter( item => item.category === "exercise");

  
  //allTopicQuestionsArray is sometimes used to tell AI what kind of problems student is solving
  const allTopicQuestionsArray = exercises.map(item => item.question);
  
  //integer
  //contains current exercise information (question, explanation, answer, answerType, topic, category)
  const [exerciseNumber, setExerciseNumber] = useState(null);
  
  //JSON object
  // const exerciseInformationObject = {
  //       question: currentExercise.question,
  //       answer: currentExercise.answer,
  //       explanation: currentExercise.explanation,
  //       answerType: currentExercise.answerType,
  //       correctSteps: currentExercise.correctSteps,
  //       incorrectSteps: currentExercise.incorrectSteps
  //     }
  //Assigned in handleExerciseInformation
  const [exerciseInformation, setExerciseInformation] = useState(null);
  // boolean
  //assigned when users press a button and select an option (true or false)
  const [checkSolutionWithAIToggle, setCheckSolutionWithAIToggle] = useState(false);
  
  const [showProblemLatexBool, setShowProblemLatexBool] = useState(false);
   
  
 
  
  useEffect(()=>{
    if (topicInformation){
      setExerciseNumber(null)
      setExerciseInformation(null)
      setCheckSolutionWithAIToggle(false)
    }
  }, [topicInformation]);
  
  
  
  useEffect(() => {
    if (exerciseNumber !== null) { // Changed from `if (exerciseNumber)`
      handleExerciseInformation();
    }
  }, [exerciseNumber]);
   


useEffect(() => {
//   console.log('allTopicQuestionsArray changed:', allTopicQuestionsArray);
}, [allTopicQuestionsArray]); // Runs on mount and whenever allTopicQuestionsArray changes

  
  
  


const handleExerciseInformation = () => {
  
    let currentExercise = null; // Initialize as null

    if (exercises.length > 0) { // Check if the array is not empty
    
    currentExercise = exercises[exerciseNumber];
    ///* console.log( */"currentExercise: ", currentExercise)
      
      //case when the new question is different
      
      const exerciseInformationObject = {
        question: currentExercise.question,
        answer: currentExercise.answer,
        correctSteps: currentExercise.correctSteps,
      }
      
      ///* console.log( */"exerciseInformationObject: ", exerciseInformationObject)

      
      setExerciseInformation(exerciseInformationObject);
      
      //this will rerender the children components, including AI chat
      setCheckSolutionWithAIToggle(false)
      
      
    
      
    } else {
      // Handle the case where 'exercises' array is empty
        ///* console.log( */"Exercises are empty");
    }
    

};
  

  
  
  
  const latexString = { "testString": "Solve the system of equations: $\begin{cases} y^2 - 2x = -5 \\ y^2 + 4x = 10 \end{cases}$"}
  
  const myData = {
  "equation1": "The area of a circle is given by $A = \\pi r^2$.",
  "equation2": "The quadratic formula is $x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$."
};

// When rendering myData.equation1 or myData.equation2 with KaTeX, the LaTeX will be correctly interpreted.

  

  // Inside your MathQuillComponent or wherever it's being used
useEffect(() => {
//   console.log('MathQuillComponent mounted.');
}, []);

  
  return (
    
        <section style={mainStyle}>
        {//<p>All examples: {JSON.stringify(examples)}</p>
        //<p>All exercises: {JSON.stringify(exercises)}</p>
        //<p>All videos: {JSON.stringify(videos)}</p>
        }

{
/*
<DebugComponent
      data = {{
      topicInformation: topicInformation,
      exercises:exercises,
      exerciseInformation: exerciseInformation,
      exerciseNumber: exerciseNumber
      }}
      />
*/

}
          <h1>{currentTopic}</h1>

          <QuicklyUploadQuestions
          allTopicQuestionsArray = {allTopicQuestionsArray}
          />

          <h2>Practice Problems</h2>
          

          {exercises.map( (exercise, index) => (
          <button className="exercise-button" key={index} onClick={(event) => setExerciseNumber(index)}>Exercise {index+1}</button>
          )
          
          )}
          
          {exerciseInformation && (
          <div>

          <p style={{ fontSize: '18px', backgroundColor: 'white' }}>Exercise {exerciseNumber+1}</p>
         
          <button onClick={()=> setShowProblemLatexBool(!showProblemLatexBool)}>{showProblemLatexBool ? "switch to normal" : "switch to latex"}</button>
          
          {showProblemLatexBool ? (
            <p style={{ fontSize: '24px', backgroundColor: 'white', marginBottom: '20px' }}> {exerciseInformation.question} </p>
            ) : (
            
            <p style={{ fontSize: '24px', backgroundColor: 'white', marginBottom: '20px' }}> <Latex>{exerciseInformation.question}</Latex> </p>
          )}
          <button onClick={() => setCheckSolutionWithAIToggle(!checkSolutionWithAIToggle)}>
            {checkSolutionWithAIToggle ? "Type your own answer" : "See how AI solved the problem"}
          </button>
               
               
                    
          {checkSolutionWithAIToggle === false && (
          
          <div>
          <UserSolutionToTheProblem
          exerciseInformation = {exerciseInformation}
          />
          </div>
          )}
          
          
          
          { checkSolutionWithAIToggle === true && (
          //this div divides the workboard into two horizontal blocks. Then 1 div is for blocks, other is for AI
          
          <AISolutionToTheProblem
          exerciseInformation = {exerciseInformation}
          />
          
          )}  

 
          
        </div> 
         
         
        )}
        </section>
  )}
        







const UserSolutionToTheProblem = ({exerciseInformation}) => {
  
  const [mathquillLatexValuesArray, setMathquillLatexValuesArray] = useState([])
  
  const systemInstructionRoutingSolutionChecker = "checkUserSolutionWithAI";
  const textareaPlaceholder = "I can check your whiteboard and answer your questions"
  useEffect(() => {
    // No operation; just triggers re-render
  }, [exerciseInformation]);
  

const answerCheckerStyle = {
  width: '10vw', // Adjusted width to make it smaller
  height: '2em', // Adjusted height to fit a single line of text, 'em' units make it relative to font size
  padding: '5px', // Reduced padding to decrease overall size
  borderColor: '#ccc',
  borderRadius: '4px',
};
  
  
    const solutionCheckerStyle = {
    width: '20vw',
    height: '20px',
    padding: '10px',
    borderColor: '#ccc',
    borderRadius: '4px',
    // Additional styles can go here
  };
  
  
     const splitScreenStyle = {
    horizontalLayout: {
      display: 'flex',
      justifyContent: 'space-around',
      alignItems: 'flex-start',
      width: '100%', // Ensures the flex container takes full width
    },
    childDiv: {
      flex: 1, // Each child div takes equal space
      margin: '10px', // Adds some space between the divs
    },
};
  
  
  return(
    
    <div style={splitScreenStyle.horizontalLayout}>
        
        

        
          <div style={splitScreenStyle.childDiv}>
    
            <h2>Your Whiteboard</h2>
          
            <MathQuill
            setMathquillLatexValuesArray = {setMathquillLatexValuesArray}
            />
            
            
          </div>
          
          
          <div style={splitScreenStyle.childDiv}>
          
          
          
          
            <h2>Assistant</h2>
            <AIChat
            exerciseInformation = {exerciseInformation}
            systemInstructionRouting = {systemInstructionRoutingSolutionChecker}
            textAreaStyle = {solutionCheckerStyle}
            mathquillLatexValuesArray = {mathquillLatexValuesArray}
            textareaPlaceholder = {textareaPlaceholder}
            />
          
          
          
          
            
          </div>


            
            
      </div>
    
    )
  
}
        
        
        
const AISolutionToTheProblem = ({exerciseInformation}) => {
    
   const splitScreenStyle = {
    horizontalLayout: {
      display: 'flex',
      justifyContent: 'space-around',
      alignItems: 'flex-start',
      width: '100%', // Ensures the flex container takes full width
    },
    childDiv: {
      flex: 1, // Each child div takes equal space
      margin: '10px', // Adds some space between the divs
    },
};


const [selectedSolutionStepInteger, setSelectedSolutionStepInteger] = useState(null);

const systemInstructionRouting = 'checkAISolution'
  
  return (

    
    
    <div style={splitScreenStyle.horizontalLayout}>
            
              <div style={splitScreenStyle.childDiv}> 
              
                <p>This is how AI solved the problem </p>
                <SolutionStepBoxes
                setSelectedSolutionStepInteger = {setSelectedSolutionStepInteger}
                exerciseInformation = {exerciseInformation}
                />
                
              </div>
              
              
              <div style={splitScreenStyle.childDiv}>
                <h3>Ask for explanation </h3>
                {selectedSolutionStepInteger !== null && selectedSolutionStepInteger !== undefined ? (
                    <h3>Discuss step {selectedSolutionStepInteger}</h3>
                ):(
                    <h3>you can select a specific step for clarification</h3>
                )}

                <AIChat
                  exerciseInformation={exerciseInformation}
                  selectedSolutionStepInteger={selectedSolutionStepInteger}
                  systemInstructionRouting = {systemInstructionRouting}
                />
              </div>
            

    </div>
    

    )
}
        
        
const SolutionStepBoxes = ({ exerciseInformation, setSelectedSolutionStepInteger }) => {
  const [numberOfDisplaySteps, setNumberOfDisplaySteps] = useState(1); // Start showing 1 step

  const totalSteps = exerciseInformation.correctSteps.length;

  const handleIncreaseSteps = () => {
    if (numberOfDisplaySteps < totalSteps) {
      setNumberOfDisplaySteps(numberOfDisplaySteps + 1);
    }
  };

  const handleDecreaseSteps = () => {
    if (numberOfDisplaySteps > 1) {
      setNumberOfDisplaySteps(numberOfDisplaySteps - 1);
    }
  };

  const handleShowAllSteps = () => {
    setNumberOfDisplaySteps(totalSteps);
  };

  return (
    <>
      <div>
        <button onClick={handleDecreaseSteps}>remove 1 step</button>
        <button onClick={handleIncreaseSteps}>add 1 step</button>
        <button onClick={handleShowAllSteps}>Show All Steps</button>
      </div>
      {exerciseInformation.correctSteps.slice(0, numberOfDisplaySteps).map((item, index) => (
        <button 
          key={index} 
          style={{ 
            width: '80%',
            height: 'auto',
            overflow: 'auto', 
            margin: '10px 0',
            display: 'block',
            userSelect: 'text',
            fontSize: '20px',
            lineHeight: '1.0',
            padding: '10px',
          }}
          onClick={() => {
//             console.log( typeof item, item);
            setSelectedSolutionStepInteger(index)
          }}>
          {typeof item === 'string' && <Latex>{item}</Latex>}
        </button>
      ))}
    </>
  );
};
        
        
export default MainWorkBoard